@use "sass:color";
@use "sass:meta";
@use "sass:map";

@mixin button-shape($args...) {
  $argMap: map.merge((
    prefix: '',
    h-padding: 16px,
    min-width: 100px,
    height: 34px,
    border-radius: 8px,
    border-width: 1px,
    font-size: 14px,
  ), meta.keywords($args));

  $prefix: map.get($argMap, prefix);

  @if $prefix != '' {
    $prefix: '#{$prefix}-'
  }

  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  appearance: none;
  padding: 0 map.get($argMap, h-padding);
  min-width: map.get($argMap, min-width);
  height: map.get($argMap, height);
  border-radius: map.get($argMap, border-radius);
  font-size: map.get($argMap, font-size);
  cursor: pointer;
  font-weight: normal;
  outline: none;
  border: none;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: map.get($argMap, border-radius);
    border: solid map.get($argMap, border-width) transparent;
    pointer-events: none;
  }

  &:focus,
  &:hover {
    &::before {
      border-width: map.get($argMap, border-width-hover);
    }
  }

  &:active {
    &::before {
      border-width: map.get($argMap, border-width-active);
    }
  }

  &[disabled],
  &.#{$prefix}disabled {
    cursor: not-allowed;

    &::before {
      border-width: map.get($argMap, border-width-disable);
    }
  }

}

@mixin button-vision($args...) {
  $argMap: map.merge((
    // normal
    border-width: 1px,
    border-color: transparent,
    background: transparent,
    color: white,
    // active
    border-width-active: 1px,
    border-color-active: transparent,
    background-active: transparent,
    color-active: white,
    // hover
    border-width-hover: 1px,
    border-color-hover: transparent,
    background-hover: transparent,
    color-hover: white,
    // disable
    border-width-disable: 1px,
    border-color-disable: transparent,
    background-disable: transparent,
    color-disable: white,
  ), meta.keywords($args));

  $prefix: map.get($argMap, prefix);

  @if $prefix != '' {
    $prefix: '#{$prefix}-'
  }

  background-color: map.get($argMap, background);
  color: map.get($argMap, color);

  &::before {
    border-color: map.get($argMap, border-color);
  }

  &:focus,
  &:hover {
    background-color: map.get($argMap, background-hover);

    &::before {
      border-color: map.get($argMap, border-color-hover);
    }
  }

  &:active {
    background-color: map.get($argMap, background-active);

    &::before {
      border-color: map.get($argMap, border-color-active);
    }
  }

  &[disabled],
  &.#{$prefix}disabled {
    background-color: map.get($argMap, background-disable);
    color: map.get($argMap, color-disable);

    &::before {
      border-color: map.get($argMap, border-color-disable);
    }
  }
}

@mixin button-effect($args...) {
  $argMap: map.merge((
    sibling-gutter: 8px,
  ), meta.keywords($args));

  & + & {
    margin-left: map.get($argMap, sibling-gutter);
  }
}